Reflection#1 @L2E5:
	What happens when you initialize a repository? Why do you need to do it?
	Git creates an empty repo and a file named ".git/"
	Because otherwise I would not have a repo to commit.


Reflection#2 @L2E8:
	How is the staging area different from the working directory and the repository? What value do you think it offers?
	It is not working directory. because the files in staging area are in a different position then not-added files.
	It is not repository. Because the files in staging area have not commited yet.
	It offers a way to create logically-meaningful and rich repository at the creation level of that repository. Say I forget to create the repo at the beginning of the project. I may create the repo whenever I want and yet I have a chance to make logically-meaningful and beautiful commits.



Reflection#3 @L2E13:
	How can you use the staging area to make sure you have one commit per logical change?
	I may have done more than one logical change. With staging area I can split these changes into logival sub-groups and decide which one goes first, second ... etc.


Reflection#4 @L2E16:
	What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	* Some experimental changes
	* Some break-through but maybe-dangereus ideas
	* Some ideas come o my mind that I've not mentioned to my collieges and prefer to keep myself until I could be sure about it to work out smoothly...
	
Reflection#5 @L2E21:
	How do the diagrams help you visualize the branch structure?
	They are eye-candy. It is easier to understand the structure with a visual graph.
	
	
Reflection#6 @L2E26:
	What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	* Different lines of history became linearly connected.
	* Parental status remains unchanged.
	* Now we definitely need to use "$git show id_of_commit" command, since we cannot effectively determine who is parent of whom.
        We represent it in the diagram to make it easier to see and understand the whole process.

        
Reflection#7 @L2E33:
	What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	* Automatic Merging
	    Pros:
	    * Practical
	    Cons:
	    * May do something wrong out of your control

	* Manual Merging
	    Pros:
	    * More control chance
	    Cons:
	    * Inpractical

